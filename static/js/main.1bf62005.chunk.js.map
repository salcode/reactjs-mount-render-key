{"version":3,"sources":["components/Mounted/index.js","components/NavBar/index.js","components/StatelessBumperCar/index.js","components/WaitingDrivers/index.js","components/PropsPage/index.js","components/StatefulBumperCar/index.js","components/StatePage/index.js","App.js","reportWebVitals.js","index.js"],"names":["Mounted","useState","isMounted","setIsMounted","useEffect","setTimeout","className","NavBar","style","width","backgroundColor","exact","to","StatelessBumperCar","color","driver","WaitingDrivers","driverIndex","drivers","numberOfCars","slice","length","map","name","PropsPage","cars","setDriverIndex","car","i","onClick","current","StatefulBumperCar","myKey","damage","setDamage","currentDamage","StatePage","initialCarsArray","setCars","keyType","setKeyType","key","id","onChange","event","target","value","selected","sort","Math","random","originalCars","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bf62005.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport default function Mounted() {\n  const [isMounted, setIsMounted] = useState(true);\n\n  useEffect(() => {\n    setTimeout(\n      () => setIsMounted(false),\n      2000\n    );\n  }, []);\n\n  if (! isMounted) {\n    return null;\n  }\n  return (\n    <div\n      className=\"mounted-indicator\"\n    />\n  );\n}\n","import { NavLink } from 'react-router-dom';\n\nexport default function NavBar() {\n  return (\n    <div style={{width: '100%', backgroundColor: 'black'}}>\n      <ul>\n        <li>\n          <NavLink\n            exact\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink\n            to=\"/props-page\"\n          >\n            Props Example\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            to=\"/state-page\"\n          >\n            State Example\n          </NavLink>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import Mounted from '../Mounted';\n\nexport default function StatelessBumperCar({color, driver}) {\n  return (\n    <div className=\"bumper-car\" style={{backgroundColor: color}}>\n      <Mounted />\n      <strong>Bumper Car</strong>\n      <div className=\"bumper-car__driver\">\n        {driver}\n      </div>\n    </div>\n  );\n}\n","export default function WaitingDrivers({\n  driverIndex,\n  drivers,\n  numberOfCars\n}) {\n  return (\n  <>\n    <ul className=\"waiting-drivers\">\n      {\n        [\n          ...drivers,\n          ...drivers\n        ].slice(\n          driverIndex + numberOfCars,\n          driverIndex + drivers.length\n        ).map((name) => (<li>{name}</li>))\n      }\n    </ul>\n  </>\n  );\n}\n\n","import { useState } from 'react';\nimport BumperCar from '../StatelessBumperCar';\nimport WaitingDrivers from '../WaitingDrivers';\n\nexport default function PropsPage({cars, drivers}) {\n  const [driverIndex, setDriverIndex] = useState(0);\n  return (\n    <div>\n      {\n        cars.map((car, i) => (\n          <BumperCar\n          color={car.color}\n          driver={drivers[(driverIndex+i) % drivers.length]}\n          />\n        ))\n      }\n      <br />\n      <button\n        onClick={() => setDriverIndex(\n          (current) =>\n            current < (drivers.length - 1) ?\n              ++current : 0\n        )}\n      >\n        Next driver\n      </button>\n      <br />\n      <br />\n      <strong>Waiting Drivers</strong>\n      <WaitingDrivers\n        driverIndex={driverIndex}\n        drivers={drivers}\n        numberOfCars={cars.length}\n      />\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport Mounted from '../Mounted';\n\nexport default function StatefulBumperCar({color, myKey}) {\n  const [damage, setDamage] = useState(0);\n  return (\n    <div className=\"bumper-car\" style={{backgroundColor: color}}>\n      <Mounted />\n      <strong>Bumper Car (Key: {myKey})</strong>\n      <br />\n      <button\n        onClick={() => {\n          setDamage(\n            (currentDamage) => currentDamage < 100 ? currentDamage + 10 : 100\n          );\n        }}\n      >\n        Add Damage\n      </button>\n      <div className=\"display-damage\">\n        Current Damage: {damage}%\n      </div>\n\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport BumperCar from '../StatefulBumperCar';\n\nexport default function StatePage({initialCarsArray}) {\n  const [cars, setCars] = useState(initialCarsArray);\n  const [keyType, setKeyType] = useState('index');\n  return (\n    <div>\n      {\n        cars.map((car, i) => {\n          const key = keyType === 'index' ? i : car.id;\n          return <BumperCar\n            color={car.color}\n            key={key}\n            myKey={key}\n          />\n        })\n      }\n      <br />\n      <select\n        onChange={(event) => {\n          setKeyType(event.target.value);\n        }}\n      >\n        <option value=\"index\" selected>Use array index for key</option>\n        <option value=\"id\">Use car.id for key</option>\n      </select>\n      <br />\n      <br />\n      <button\n        onClick={() => setCars(\n          (cars) => [...cars].sort( () => .5 - Math.random() )\n        )}\n      >\n        Shuffle Cars\n      </button>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport BumperCar from './components/BumperCar';\nimport NavBar from './components/NavBar';\nimport PropsPage from './components/PropsPage';\nimport StatePage from './components/StatePage';\n\nconst drivers = [\n  'abby',\n  'barry',\n  'cat',\n  'diane',\n  'elwood',\n  'frank',\n  'greg',\n  'hank',\n  'issac',\n  'jr',\n  'kate',\n];\n\nconst originalCars = [\n  {\n    color: 'red',\n    id: 'car1',\n  },\n  {\n    color: 'green',\n    id: 'car2',\n  },\n  {\n    color: 'purple',\n    id: 'car3',\n  },\n  {\n    color: 'blue',\n    id: 'car4',\n  },\n];\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <NavBar />\n        </header>\n        <main>\n          <Switch>\n            <Route\n              path=\"/props-page\"\n              component={() => <PropsPage\n                cars={originalCars}\n                drivers={drivers}\n              />}\n            />\n            <Route\n              path=\"/state-page\"\n              component={() => <StatePage\n                initialCarsArray={originalCars}\n              />}\n            />\n          </Switch>\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}